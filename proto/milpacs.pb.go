//
//  Copyright (C) 2021 7Cav.us
//  This file is part of 7Cav-API <https://github.com/7cav/api>.
//
//  7Cav-API is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  7Cav-API is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with 7Cav-API. If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.18.1
// source: milpacs.proto

package proto

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RosterType int32

const (
	RosterType_ROSTER_TYPE_UNSPECIFIED   RosterType = 0
	RosterType_ROSTER_TYPE_COMBAT        RosterType = 1
	RosterType_ROSTER_TYPE_RESERVE       RosterType = 2
	RosterType_ROSTER_TYPE_ELOA          RosterType = 3
	RosterType_ROSTER_TYPE_WALL_OF_HONOR RosterType = 4
	RosterType_ROSTER_TYPE_ARLINGTON     RosterType = 5
	RosterType_ROSTER_TYPE_PAST_MEMBERS  RosterType = 6
)

// Enum value maps for RosterType.
var (
	RosterType_name = map[int32]string{
		0: "ROSTER_TYPE_UNSPECIFIED",
		1: "ROSTER_TYPE_COMBAT",
		2: "ROSTER_TYPE_RESERVE",
		3: "ROSTER_TYPE_ELOA",
		4: "ROSTER_TYPE_WALL_OF_HONOR",
		5: "ROSTER_TYPE_ARLINGTON",
		6: "ROSTER_TYPE_PAST_MEMBERS",
	}
	RosterType_value = map[string]int32{
		"ROSTER_TYPE_UNSPECIFIED":   0,
		"ROSTER_TYPE_COMBAT":        1,
		"ROSTER_TYPE_RESERVE":       2,
		"ROSTER_TYPE_ELOA":          3,
		"ROSTER_TYPE_WALL_OF_HONOR": 4,
		"ROSTER_TYPE_ARLINGTON":     5,
		"ROSTER_TYPE_PAST_MEMBERS":  6,
	}
)

func (x RosterType) Enum() *RosterType {
	p := new(RosterType)
	*p = x
	return p
}

func (x RosterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RosterType) Descriptor() protoreflect.EnumDescriptor {
	return file_milpacs_proto_enumTypes[0].Descriptor()
}

func (RosterType) Type() protoreflect.EnumType {
	return &file_milpacs_proto_enumTypes[0]
}

func (x RosterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RosterType.Descriptor instead.
func (RosterType) EnumDescriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{0}
}

type RecordType int32

const (
	RecordType_RECORD_TYPE_UNSPECIFIED  RecordType = 0
	RecordType_RECORD_TYPE_PROMOTION    RecordType = 1
	RecordType_RECORD_TYPE_OPERATION    RecordType = 2
	RecordType_RECORD_TYPE_TRANSFER     RecordType = 3
	RecordType_RECORD_TYPE_DISCIPLINARY RecordType = 4
	RecordType_RECORD_TYPE_DISCHARGE    RecordType = 5
	RecordType_RECORD_TYPE_ASSIGNMENT   RecordType = 6
	RecordType_RECORD_TYPE_NAME_CHANGE  RecordType = 7
	RecordType_RECORD_TYPE_ELOA         RecordType = 8
	RecordType_RECORD_TYPE_GRADUATION   RecordType = 9
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "RECORD_TYPE_UNSPECIFIED",
		1: "RECORD_TYPE_PROMOTION",
		2: "RECORD_TYPE_OPERATION",
		3: "RECORD_TYPE_TRANSFER",
		4: "RECORD_TYPE_DISCIPLINARY",
		5: "RECORD_TYPE_DISCHARGE",
		6: "RECORD_TYPE_ASSIGNMENT",
		7: "RECORD_TYPE_NAME_CHANGE",
		8: "RECORD_TYPE_ELOA",
		9: "RECORD_TYPE_GRADUATION",
	}
	RecordType_value = map[string]int32{
		"RECORD_TYPE_UNSPECIFIED":  0,
		"RECORD_TYPE_PROMOTION":    1,
		"RECORD_TYPE_OPERATION":    2,
		"RECORD_TYPE_TRANSFER":     3,
		"RECORD_TYPE_DISCIPLINARY": 4,
		"RECORD_TYPE_DISCHARGE":    5,
		"RECORD_TYPE_ASSIGNMENT":   6,
		"RECORD_TYPE_NAME_CHANGE":  7,
		"RECORD_TYPE_ELOA":         8,
		"RECORD_TYPE_GRADUATION":   9,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_milpacs_proto_enumTypes[1].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_milpacs_proto_enumTypes[1]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{1}
}

type RankType int32

const (
	RankType_RANK_TYPE_UNSPECIFIED RankType = 0
	RankType_RANK_TYPE_GOA         RankType = 1
	RankType_RANK_TYPE_GEN         RankType = 2
	RankType_RANK_TYPE_LTG         RankType = 3
	RankType_RANK_TYPE_MG          RankType = 4
	RankType_RANK_TYPE_BG          RankType = 5
	RankType_RANK_TYPE_COL         RankType = 6
	RankType_RANK_TYPE_LTC         RankType = 7
	RankType_RANK_TYPE_MAJ         RankType = 8
	RankType_RANK_TYPE_CPT         RankType = 9
	RankType_RANK_TYPE_1LT         RankType = 10
	RankType_RANK_TYPE_2LT         RankType = 11
	RankType_RANK_TYPE_CSM         RankType = 12
	RankType_RANK_TYPE_SGM         RankType = 13
	RankType_RANK_TYPE_1SG         RankType = 14
	RankType_RANK_TYPE_MSG         RankType = 15
	RankType_RANK_TYPE_SFC         RankType = 16
	RankType_RANK_TYPE_SSG         RankType = 17
	RankType_RANK_TYPE_SGT         RankType = 18
	RankType_RANK_TYPE_CPL         RankType = 19
	RankType_RANK_TYPE_SPC         RankType = 20
	RankType_RANK_TYPE_PFC         RankType = 21
	RankType_RANK_TYPE_PVT         RankType = 22
	RankType_RANK_TYPE_RCT         RankType = 23
	RankType_RANK_TYPE_CW5         RankType = 26
	RankType_RANK_TYPE_CW4         RankType = 27
	RankType_RANK_TYPE_CW3         RankType = 28
	RankType_RANK_TYPE_CW2         RankType = 29
	RankType_RANK_TYPE_WO1         RankType = 30
	RankType_RANK_TYPE_AR          RankType = 31
)

// Enum value maps for RankType.
var (
	RankType_name = map[int32]string{
		0:  "RANK_TYPE_UNSPECIFIED",
		1:  "RANK_TYPE_GOA",
		2:  "RANK_TYPE_GEN",
		3:  "RANK_TYPE_LTG",
		4:  "RANK_TYPE_MG",
		5:  "RANK_TYPE_BG",
		6:  "RANK_TYPE_COL",
		7:  "RANK_TYPE_LTC",
		8:  "RANK_TYPE_MAJ",
		9:  "RANK_TYPE_CPT",
		10: "RANK_TYPE_1LT",
		11: "RANK_TYPE_2LT",
		12: "RANK_TYPE_CSM",
		13: "RANK_TYPE_SGM",
		14: "RANK_TYPE_1SG",
		15: "RANK_TYPE_MSG",
		16: "RANK_TYPE_SFC",
		17: "RANK_TYPE_SSG",
		18: "RANK_TYPE_SGT",
		19: "RANK_TYPE_CPL",
		20: "RANK_TYPE_SPC",
		21: "RANK_TYPE_PFC",
		22: "RANK_TYPE_PVT",
		23: "RANK_TYPE_RCT",
		26: "RANK_TYPE_CW5",
		27: "RANK_TYPE_CW4",
		28: "RANK_TYPE_CW3",
		29: "RANK_TYPE_CW2",
		30: "RANK_TYPE_WO1",
		31: "RANK_TYPE_AR",
	}
	RankType_value = map[string]int32{
		"RANK_TYPE_UNSPECIFIED": 0,
		"RANK_TYPE_GOA":         1,
		"RANK_TYPE_GEN":         2,
		"RANK_TYPE_LTG":         3,
		"RANK_TYPE_MG":          4,
		"RANK_TYPE_BG":          5,
		"RANK_TYPE_COL":         6,
		"RANK_TYPE_LTC":         7,
		"RANK_TYPE_MAJ":         8,
		"RANK_TYPE_CPT":         9,
		"RANK_TYPE_1LT":         10,
		"RANK_TYPE_2LT":         11,
		"RANK_TYPE_CSM":         12,
		"RANK_TYPE_SGM":         13,
		"RANK_TYPE_1SG":         14,
		"RANK_TYPE_MSG":         15,
		"RANK_TYPE_SFC":         16,
		"RANK_TYPE_SSG":         17,
		"RANK_TYPE_SGT":         18,
		"RANK_TYPE_CPL":         19,
		"RANK_TYPE_SPC":         20,
		"RANK_TYPE_PFC":         21,
		"RANK_TYPE_PVT":         22,
		"RANK_TYPE_RCT":         23,
		"RANK_TYPE_CW5":         26,
		"RANK_TYPE_CW4":         27,
		"RANK_TYPE_CW3":         28,
		"RANK_TYPE_CW2":         29,
		"RANK_TYPE_WO1":         30,
		"RANK_TYPE_AR":          31,
	}
)

func (x RankType) Enum() *RankType {
	p := new(RankType)
	*p = x
	return p
}

func (x RankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankType) Descriptor() protoreflect.EnumDescriptor {
	return file_milpacs_proto_enumTypes[2].Descriptor()
}

func (RankType) Type() protoreflect.EnumType {
	return &file_milpacs_proto_enumTypes[2]
}

func (x RankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RankType.Descriptor instead.
func (RankType) EnumDescriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{2}
}

type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProfileRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type KeycloakIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeycloakId string `protobuf:"bytes,1,opt,name=keycloak_id,json=keycloakId,proto3" json:"keycloak_id,omitempty"`
}

func (x *KeycloakIdRequest) Reset() {
	*x = KeycloakIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeycloakIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeycloakIdRequest) ProtoMessage() {}

func (x *KeycloakIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeycloakIdRequest.ProtoReflect.Descriptor instead.
func (*KeycloakIdRequest) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{1}
}

func (x *KeycloakIdRequest) GetKeycloakId() string {
	if x != nil {
		return x.KeycloakId
	}
	return ""
}

type Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankShort    string `protobuf:"bytes,1,opt,name=rank_short,json=rankShort,proto3" json:"rank_short,omitempty"`
	RankFull     string `protobuf:"bytes,2,opt,name=rank_full,json=rankFull,proto3" json:"rank_full,omitempty"`
	RankImageUrl string `protobuf:"bytes,3,opt,name=rank_image_url,json=rankImageUrl,proto3" json:"rank_image_url,omitempty"`
	RankId       uint64 `protobuf:"varint,4,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
}

func (x *Rank) Reset() {
	*x = Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rank) ProtoMessage() {}

func (x *Rank) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rank.ProtoReflect.Descriptor instead.
func (*Rank) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{2}
}

func (x *Rank) GetRankShort() string {
	if x != nil {
		return x.RankShort
	}
	return ""
}

func (x *Rank) GetRankFull() string {
	if x != nil {
		return x.RankFull
	}
	return ""
}

func (x *Rank) GetRankImageUrl() string {
	if x != nil {
		return x.RankImageUrl
	}
	return ""
}

func (x *Rank) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

type Thingy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack string `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *Thingy) Reset() {
	*x = Thingy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thingy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thingy) ProtoMessage() {}

func (x *Thingy) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thingy.ProtoReflect.Descriptor instead.
func (*Thingy) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{3}
}

func (x *Thingy) GetAck() string {
	if x != nil {
		return x.Ack
	}
	return ""
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User          *User       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Rank          *Rank       `protobuf:"bytes,2,opt,name=rank,proto3" json:"rank,omitempty"`
	RealName      string      `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	UniformUrl    string      `protobuf:"bytes,4,opt,name=uniform_url,json=uniformUrl,proto3" json:"uniform_url,omitempty"`
	Roster        RosterType  `protobuf:"varint,5,opt,name=roster,proto3,enum=proto.RosterType" json:"roster,omitempty"`
	Primary       *Position   `protobuf:"bytes,6,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondaries   []*Position `protobuf:"bytes,7,rep,name=secondaries,proto3" json:"secondaries,omitempty"`
	Records       []*Record   `protobuf:"bytes,8,rep,name=records,proto3" json:"records,omitempty"`
	Awards        []*Award    `protobuf:"bytes,9,rep,name=awards,proto3" json:"awards,omitempty"`
	JoinDate      string      `protobuf:"bytes,10,opt,name=join_date,json=joinDate,proto3" json:"join_date,omitempty"`
	PromotionDate string      `protobuf:"bytes,11,opt,name=promotion_date,json=promotionDate,proto3" json:"promotion_date,omitempty"`
	KeycloakId    string      `protobuf:"bytes,12,opt,name=keycloak_id,json=keycloakId,proto3" json:"keycloak_id,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{4}
}

func (x *Profile) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Profile) GetRank() *Rank {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *Profile) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *Profile) GetUniformUrl() string {
	if x != nil {
		return x.UniformUrl
	}
	return ""
}

func (x *Profile) GetRoster() RosterType {
	if x != nil {
		return x.Roster
	}
	return RosterType_ROSTER_TYPE_UNSPECIFIED
}

func (x *Profile) GetPrimary() *Position {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *Profile) GetSecondaries() []*Position {
	if x != nil {
		return x.Secondaries
	}
	return nil
}

func (x *Profile) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *Profile) GetAwards() []*Award {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *Profile) GetJoinDate() string {
	if x != nil {
		return x.JoinDate
	}
	return ""
}

func (x *Profile) GetPromotionDate() string {
	if x != nil {
		return x.PromotionDate
	}
	return ""
}

func (x *Profile) GetKeycloakId() string {
	if x != nil {
		return x.KeycloakId
	}
	return ""
}

type RosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roster RosterType `protobuf:"varint,1,opt,name=roster,proto3,enum=proto.RosterType" json:"roster,omitempty"`
}

func (x *RosterRequest) Reset() {
	*x = RosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterRequest) ProtoMessage() {}

func (x *RosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterRequest.ProtoReflect.Descriptor instead.
func (*RosterRequest) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{5}
}

func (x *RosterRequest) GetRoster() RosterType {
	if x != nil {
		return x.Roster
	}
	return RosterType_ROSTER_TYPE_UNSPECIFIED
}

type Roster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles map[uint64]*Profile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Roster) Reset() {
	*x = Roster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Roster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Roster) ProtoMessage() {}

func (x *Roster) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Roster.ProtoReflect.Descriptor instead.
func (*Roster) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{6}
}

func (x *Roster) GetProfiles() map[uint64]*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{7}
}

func (x *User) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordDetails string     `protobuf:"bytes,1,opt,name=record_details,json=recordDetails,proto3" json:"record_details,omitempty"`
	RecordType    RecordType `protobuf:"varint,2,opt,name=record_type,json=recordType,proto3,enum=proto.RecordType" json:"record_type,omitempty"`
	RecordDate    string     `protobuf:"bytes,3,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{8}
}

func (x *Record) GetRecordDetails() string {
	if x != nil {
		return x.RecordDetails
	}
	return ""
}

func (x *Record) GetRecordType() RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordType_RECORD_TYPE_UNSPECIFIED
}

func (x *Record) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

type Award struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwardDetails  string `protobuf:"bytes,1,opt,name=award_details,json=awardDetails,proto3" json:"award_details,omitempty"`
	AwardName     string `protobuf:"bytes,2,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty"`
	AwardDate     string `protobuf:"bytes,3,opt,name=award_date,json=awardDate,proto3" json:"award_date,omitempty"`
	AwardImageUrl string `protobuf:"bytes,4,opt,name=award_image_url,json=awardImageUrl,proto3" json:"award_image_url,omitempty"`
}

func (x *Award) Reset() {
	*x = Award{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Award) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Award) ProtoMessage() {}

func (x *Award) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Award.ProtoReflect.Descriptor instead.
func (*Award) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{9}
}

func (x *Award) GetAwardDetails() string {
	if x != nil {
		return x.AwardDetails
	}
	return ""
}

func (x *Award) GetAwardName() string {
	if x != nil {
		return x.AwardName
	}
	return ""
}

func (x *Award) GetAwardDate() string {
	if x != nil {
		return x.AwardDate
	}
	return ""
}

func (x *Award) GetAwardImageUrl() string {
	if x != nil {
		return x.AwardImageUrl
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionTitle string `protobuf:"bytes,1,opt,name=position_title,json=positionTitle,proto3" json:"position_title,omitempty"`
	PositionId    uint64 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milpacs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_milpacs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_milpacs_proto_rawDescGZIP(), []int{10}
}

func (x *Position) GetPositionTitle() string {
	if x != nil {
		return x.PositionTitle
	}
	return ""
}

func (x *Position) GetPositionId() uint64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

var File_milpacs_proto protoreflect.FileDescriptor

var file_milpacs_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x11, 0x4b,
	0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49,
	0x64, 0x22, 0x81, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x61, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x06, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63,
	0x6b, 0x22, 0xc6, 0x03, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a,
	0x06, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79,
	0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0d, 0x52, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x05,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0x52, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x2a, 0xc8, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4c, 0x4f, 0x41, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x46, 0x5f, 0x48,
	0x4f, 0x4e, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4c, 0x49, 0x4e, 0x47, 0x54, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x06, 0x2a,
	0x9d, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x49,
	0x50, 0x4c, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x4f,
	0x41, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x2a,
	0xc9, 0x04, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x41, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x54, 0x47, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x47,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x47, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x54, 0x43, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4a, 0x10, 0x08, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x54, 0x10, 0x09,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x4c,
	0x54, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x32, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x53, 0x4d, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x47, 0x4d, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x53, 0x47, 0x10, 0x0e, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x46, 0x43, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x53, 0x47, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x47, 0x54, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x4c, 0x10, 0x13, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x43, 0x10,
	0x14, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x46, 0x43, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x56, 0x54, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x43, 0x54, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x57, 0x35, 0x10, 0x1a, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x57, 0x34, 0x10, 0x1b,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x57,
	0x33, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x57, 0x32, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x31, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x10, 0x1f, 0x32, 0xb3, 0x05, 0x0a, 0x0d,
	0x4d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf9, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xc3, 0x01, 0x92, 0x41, 0x65, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x2c, 0x20, 0x4d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x73, 0x2c, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x47, 0x65, 0x74, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x6d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x1a, 0x2b, 0x47, 0x65, 0x74, 0x20, 0x6d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x20, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x75, 0x73, 0x65, 0x72, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x55, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69,
	0x6c, 0x70, 0x61, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x69, 0x64,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x2d, 0x12, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x22, 0x77, 0x92, 0x41,
	0x55, 0x0a, 0x0f, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x4d, 0x69, 0x6c, 0x70, 0x61,
	0x63, 0x73, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x6d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x7d, 0x12, 0xf9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x64, 0x12, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xb6, 0x01, 0x92, 0x41, 0x85, 0x01, 0x0a,
	0x19, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x4d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x73,
	0x2c, 0x20, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x12, 0x24, 0x47, 0x65, 0x74, 0x20,
	0x61, 0x20, 0x4d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x20, 0x76, 0x69, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x20, 0x49, 0x44,
	0x1a, 0x42, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6d, 0x69, 0x6c, 0x70, 0x61, 0x63,
	0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x76,
	0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61,
	0x6b, 0x20, 0x49, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x6c, 0x70, 0x61, 0x63, 0x2f, 0x6b, 0x65, 0x79, 0x63, 0x6c,
	0x6f, 0x61, 0x6b, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f, 0x69, 0x64,
	0x7d, 0x42, 0xc4, 0x01, 0x5a, 0x19, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x37, 0x63, 0x61, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x92,
	0x41, 0xa5, 0x01, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x5a, 0x59, 0x0a,
	0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20,
	0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x72, 0x32, 0x0a, 0x13, 0x37, 0x43, 0x61, 0x76, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x37, 0x63, 0x61, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_milpacs_proto_rawDescOnce sync.Once
	file_milpacs_proto_rawDescData = file_milpacs_proto_rawDesc
)

func file_milpacs_proto_rawDescGZIP() []byte {
	file_milpacs_proto_rawDescOnce.Do(func() {
		file_milpacs_proto_rawDescData = protoimpl.X.CompressGZIP(file_milpacs_proto_rawDescData)
	})
	return file_milpacs_proto_rawDescData
}

var file_milpacs_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_milpacs_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_milpacs_proto_goTypes = []interface{}{
	(RosterType)(0),           // 0: proto.RosterType
	(RecordType)(0),           // 1: proto.RecordType
	(RankType)(0),             // 2: proto.RankType
	(*ProfileRequest)(nil),    // 3: proto.ProfileRequest
	(*KeycloakIdRequest)(nil), // 4: proto.KeycloakIdRequest
	(*Rank)(nil),              // 5: proto.Rank
	(*Thingy)(nil),            // 6: proto.Thingy
	(*Profile)(nil),           // 7: proto.Profile
	(*RosterRequest)(nil),     // 8: proto.RosterRequest
	(*Roster)(nil),            // 9: proto.Roster
	(*User)(nil),              // 10: proto.User
	(*Record)(nil),            // 11: proto.Record
	(*Award)(nil),             // 12: proto.Award
	(*Position)(nil),          // 13: proto.Position
	nil,                       // 14: proto.Roster.ProfilesEntry
}
var file_milpacs_proto_depIdxs = []int32{
	10, // 0: proto.Profile.user:type_name -> proto.User
	5,  // 1: proto.Profile.rank:type_name -> proto.Rank
	0,  // 2: proto.Profile.roster:type_name -> proto.RosterType
	13, // 3: proto.Profile.primary:type_name -> proto.Position
	13, // 4: proto.Profile.secondaries:type_name -> proto.Position
	11, // 5: proto.Profile.records:type_name -> proto.Record
	12, // 6: proto.Profile.awards:type_name -> proto.Award
	0,  // 7: proto.RosterRequest.roster:type_name -> proto.RosterType
	14, // 8: proto.Roster.profiles:type_name -> proto.Roster.ProfilesEntry
	1,  // 9: proto.Record.record_type:type_name -> proto.RecordType
	7,  // 10: proto.Roster.ProfilesEntry.value:type_name -> proto.Profile
	3,  // 11: proto.MilpacService.GetProfile:input_type -> proto.ProfileRequest
	8,  // 12: proto.MilpacService.GetRoster:input_type -> proto.RosterRequest
	4,  // 13: proto.MilpacService.GetUserViaKeycloakId:input_type -> proto.KeycloakIdRequest
	7,  // 14: proto.MilpacService.GetProfile:output_type -> proto.Profile
	9,  // 15: proto.MilpacService.GetRoster:output_type -> proto.Roster
	7,  // 16: proto.MilpacService.GetUserViaKeycloakId:output_type -> proto.Profile
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_milpacs_proto_init() }
func file_milpacs_proto_init() {
	if File_milpacs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_milpacs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeycloakIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thingy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Roster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Award); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milpacs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_milpacs_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_milpacs_proto_goTypes,
		DependencyIndexes: file_milpacs_proto_depIdxs,
		EnumInfos:         file_milpacs_proto_enumTypes,
		MessageInfos:      file_milpacs_proto_msgTypes,
	}.Build()
	File_milpacs_proto = out.File
	file_milpacs_proto_rawDesc = nil
	file_milpacs_proto_goTypes = nil
	file_milpacs_proto_depIdxs = nil
}
