// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MilpacServiceClient is the client API for MilpacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MilpacServiceClient interface {
	GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	GetRoster(ctx context.Context, in *RosterRequest, opts ...grpc.CallOption) (*Roster, error)
	GetUserViaKeycloakId(ctx context.Context, in *KeycloakIdRequest, opts ...grpc.CallOption) (*Profile, error)
}

type milpacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMilpacServiceClient(cc grpc.ClientConnInterface) MilpacServiceClient {
	return &milpacServiceClient{cc}
}

func (c *milpacServiceClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/proto.MilpacService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpacServiceClient) GetRoster(ctx context.Context, in *RosterRequest, opts ...grpc.CallOption) (*Roster, error) {
	out := new(Roster)
	err := c.cc.Invoke(ctx, "/proto.MilpacService/GetRoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milpacServiceClient) GetUserViaKeycloakId(ctx context.Context, in *KeycloakIdRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/proto.MilpacService/GetUserViaKeycloakId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilpacServiceServer is the server API for MilpacService service.
// All implementations should embed UnimplementedMilpacServiceServer
// for forward compatibility
type MilpacServiceServer interface {
	GetProfile(context.Context, *ProfileRequest) (*Profile, error)
	GetRoster(context.Context, *RosterRequest) (*Roster, error)
	GetUserViaKeycloakId(context.Context, *KeycloakIdRequest) (*Profile, error)
}

// UnimplementedMilpacServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMilpacServiceServer struct {
}

func (UnimplementedMilpacServiceServer) GetProfile(context.Context, *ProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedMilpacServiceServer) GetRoster(context.Context, *RosterRequest) (*Roster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoster not implemented")
}
func (UnimplementedMilpacServiceServer) GetUserViaKeycloakId(context.Context, *KeycloakIdRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserViaKeycloakId not implemented")
}

// UnsafeMilpacServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MilpacServiceServer will
// result in compilation errors.
type UnsafeMilpacServiceServer interface {
	mustEmbedUnimplementedMilpacServiceServer()
}

func RegisterMilpacServiceServer(s grpc.ServiceRegistrar, srv MilpacServiceServer) {
	s.RegisterService(&_MilpacService_serviceDesc, srv)
}

func _MilpacService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpacServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MilpacService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpacServiceServer).GetProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilpacService_GetRoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpacServiceServer).GetRoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MilpacService/GetRoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpacServiceServer).GetRoster(ctx, req.(*RosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilpacService_GetUserViaKeycloakId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeycloakIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilpacServiceServer).GetUserViaKeycloakId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MilpacService/GetUserViaKeycloakId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilpacServiceServer).GetUserViaKeycloakId(ctx, req.(*KeycloakIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MilpacService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MilpacService",
	HandlerType: (*MilpacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _MilpacService_GetProfile_Handler,
		},
		{
			MethodName: "GetRoster",
			Handler:    _MilpacService_GetRoster_Handler,
		},
		{
			MethodName: "GetUserViaKeycloakId",
			Handler:    _MilpacService_GetUserViaKeycloakId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milpacs.proto",
}
